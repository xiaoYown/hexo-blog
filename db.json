{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/inside/source/runtime.caef73fae70e33459c5a.js","path":"runtime.caef73fae70e33459c5a.js","modified":0,"renderable":1},{"_id":"themes/inside/source/styles.9477318680c7e6b720a2.css","path":"styles.9477318680c7e6b720a2.css","modified":0,"renderable":1},{"_id":"themes/inside/source/polyfills.28555e618578fe61f50a.js","path":"polyfills.28555e618578fe61f50a.js","modified":0,"renderable":1},{"_id":"themes/inside/source/main.5f57ed8aacba80770b83.zh-Hans.js","path":"main.5f57ed8aacba80770b83.zh-Hans.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/inside/.travis.yml","hash":"0594031d3d9f6b8a7c142dc92c9d5063eb4781a1","modified":1568446651299},{"_id":"themes/inside/.npmignore","hash":"da713828cf6427eec231c5423ed9c360016a8a80","modified":1568446651299},{"_id":"themes/inside/LICENSE","hash":"80e42bdfa4902549136f3a2445f16bff8ec46be8","modified":1568446651299},{"_id":"themes/inside/README.md","hash":"66a773039ac6de2557780203c294b6e12b1d13d4","modified":1568446651299},{"_id":"themes/inside/README_zh-Hans.md","hash":"fff71f475b22dc79f426c196268c36b8d5bb8ef5","modified":1568446651299},{"_id":"themes/inside/package.json","hash":"a359c8a46bfc93defe9b5cfcf51cd3e7a2f1f45e","modified":1568446651306},{"_id":"themes/inside/_config.yml","hash":"a6be805a4c1cdb5b7fba7b326e816c2fb3f690c1","modified":1568449290025},{"_id":"themes/inside/.github/stale.yml","hash":"cd81583c047c8835799a242566338b48271a67dd","modified":1568446651299},{"_id":"themes/inside/languages/default.yml","hash":"bc83e56a99531ff82dcd7b6f752a4db0980d3dee","modified":1568446651300},{"_id":"themes/inside/languages/en.yml","hash":"bc83e56a99531ff82dcd7b6f752a4db0980d3dee","modified":1568446651300},{"_id":"themes/inside/languages/zh-Hans.yml","hash":"c7aaba0d495bd20e09b9063476a183a6d0718f63","modified":1568446651300},{"_id":"themes/inside/languages/ja.yml","hash":"6c2c935a56347de087806b1ae7644f484994fe3c","modified":1568446651300},{"_id":"themes/inside/languages/zh-Hant.yml","hash":"46ca125b558357420e827b9d276a09777edcd914","modified":1568446651300},{"_id":"themes/inside/layout/index.ejs","hash":"cdb5762d3e622afa976176dfb170c21286b43d98","modified":1568646275138},{"_id":"themes/inside/lib/config.js","hash":"56f0d8c8bca73c5fa2659859c9403edf53e14d0d","modified":1568446651301},{"_id":"themes/inside/lib/configSchema.json","hash":"7cea99799c35e4f3252264867649c253dc25eaa6","modified":1568446651301},{"_id":"themes/inside/lib/utils.js","hash":"35459f25c934563696f066334d00766180ab8958","modified":1568446651306},{"_id":"themes/inside/scripts/index.js","hash":"380f27fb0f1dfb0ec51a2a3c96b9014bff5bf862","modified":1568446651307},{"_id":"themes/inside/source/_resources.json","hash":"138fbd4cb01b061d29eb09eb68e32b301a6df70c","modified":1568446651307},{"_id":"themes/inside/source/_theme.js","hash":"23d7d44bfd5d48750c1d93d08874fa13e7ed45fe","modified":1568446651307},{"_id":"themes/inside/source/runtime.caef73fae70e33459c5a.js","hash":"a9aafcf49f49145093fc831efd9b8e2f6c71bb9c","modified":1568446651313},{"_id":"themes/inside/source/styles.9477318680c7e6b720a2.css","hash":"60accb10d7b362e3083ef9949ec8dfd49d8cdd25","modified":1568446651313},{"_id":"source/_posts/网关二级目录前端配置.md","hash":"8ac356ae6dc74c14e4aaface612d20b4c8b337b9","modified":1593597209943},{"_id":"source/_posts/搭建gitlab服务.md","hash":"246230751b078e21e22117030ad25bd5469ed62f","modified":1569167283925},{"_id":"source/_posts/git常用命令记录.md","hash":"e29b2b5ad6b2636b8cf9133d02d005af8f21515c","modified":1587095955030},{"_id":"themes/inside/test/README.md","hash":"96cdb8d68278f099ebfc9c7f6a4745da622e34dd","modified":1568446651314},{"_id":"themes/inside/test/index.js","hash":"235de0b2dbcc456c6a7e765e60fe7c36808dc7a4","modified":1568446651314},{"_id":"themes/inside/test/jasmine.json","hash":"8a6ad42f0a1d94c252d041f18ee63669b660b15d","modified":1568446651314},{"_id":"themes/inside/.github/ISSUE_TEMPLATE/bug-report-----.md","hash":"8cb384a909f538c6d22d3362424375d4332d6390","modified":1568446651298},{"_id":"themes/inside/.github/ISSUE_TEMPLATE/bug_report.md","hash":"551a4ed855c1e3ae3f1ad6176a529caacab70f52","modified":1568446651298},{"_id":"themes/inside/.github/ISSUE_TEMPLATE/question.md","hash":"9f8004c63012d6b16b6d93f3f10293b84cbdf3f2","modified":1568446651298},{"_id":"themes/inside/.github/ISSUE_TEMPLATE/feature_request.md","hash":"4a5ec7b77092bf55fab55b3a8221197e21d34f35","modified":1568446651298},{"_id":"themes/inside/lib/filter/index.js","hash":"aeb29f86ee812ce4d35ac113c6f4b4377a03cf83","modified":1568446651301},{"_id":"themes/inside/lib/filter/post.js","hash":"977c08ddfdc616e875b75bc6c2b93a12ae91318c","modified":1568446651301},{"_id":"themes/inside/lib/filter/templates.js","hash":"86b31cec8512f37824dc4b18c89d0cf7b5987de5","modified":1568446651301},{"_id":"themes/inside/lib/generator/config.js","hash":"58f26e1f911e71152e38a14eb8e964d611c05639","modified":1568446651302},{"_id":"themes/inside/lib/generator/index.js","hash":"8ccf99fc8c843abf47cea8a1d282e885cd37a63e","modified":1568446651303},{"_id":"themes/inside/lib/generator/manifest.js","hash":"e6eb7d3353fb1e13218535a3987cd31d569fc5bd","modified":1568446651303},{"_id":"themes/inside/lib/generator/sitemap.js","hash":"5ab54fccd7a89a4c0e34562b3535120daf37ddc3","modified":1568446651303},{"_id":"themes/inside/lib/generator/sw.js","hash":"216cc78d48e0dd3d0cff374c49bdc8e83b2ecd62","modified":1568446651303},{"_id":"themes/inside/lib/generator/theme.js","hash":"416fa83328d9e99ef073813689bbf361eda28344","modified":1568446651304},{"_id":"themes/inside/lib/helper/ga.js","hash":"adc62bd06443a781d6046d3e78aa57b5e4291611","modified":1568446651304},{"_id":"themes/inside/lib/helper/index.js","hash":"93fbe9d8fe364cf4e2e55cc3d4d3156dde028f56","modified":1568446651304},{"_id":"themes/inside/lib/helper/structured_data.js","hash":"682cfb827880ccfe5a972bb326ab4691cd8c470d","modified":1568446651304},{"_id":"themes/inside/lib/helper/url_trim.js","hash":"a88302c028d2667d9336b72b50e0590e0b2edcd1","modified":1568446651304},{"_id":"themes/inside/lib/tag/canvas.js","hash":"24c02f85506c1f412a3386d14f1ceb074e4864e2","modified":1568446651305},{"_id":"themes/inside/lib/tag/gist.js","hash":"4bedda6e6c07e2eeac3a3fc97617181287d77d34","modified":1568446651305},{"_id":"themes/inside/lib/tag/index.js","hash":"bf75dd670a1d6ffffbacb183b406235780d680c6","modified":1568446651305},{"_id":"themes/inside/lib/theme-processor/index.js","hash":"467e4a90ba6d63d9936868488ce0ef528208cfd5","modified":1568446651305},{"_id":"themes/inside/lib/theme-processor/localized-script.js","hash":"5ccd086ea03304ba46dc01ea7ee16d4dda0dd809","modified":1568446651305},{"_id":"themes/inside/source/polyfills.28555e618578fe61f50a.js","hash":"3f2bda6f4ad460988984e0da6cd479ef66ea7a79","modified":1568446651313},{"_id":"themes/inside/lib/generator/entries/index.js","hash":"dabc6ee5324b9864b2030eee79b7ceb22319e63f","modified":1568446651302},{"_id":"themes/inside/lib/generator/entries/categories.js","hash":"7675804a6dcfc0fdb789644be2aa87557c826635","modified":1568446651302},{"_id":"themes/inside/lib/generator/entries/archives.js","hash":"cf630bd902efd92ac710b75f1c63b03a61a27feb","modified":1568446651302},{"_id":"themes/inside/lib/generator/entries/pages.js","hash":"0894e9a02e7580400009f1619ea21ed362ba1811","modified":1568446651302},{"_id":"themes/inside/lib/generator/entries/posts.js","hash":"f0de8451a09a78c330d0f5602bf3e92bf4f690d7","modified":1568446651302},{"_id":"themes/inside/lib/generator/entries/properties.js","hash":"92e85ab430294ba0c6fb57347cc0ea977695b25e","modified":1568446651302},{"_id":"themes/inside/lib/generator/entries/search.js","hash":"0ecccc181b0140ead9d99ff11f4e5b43132aefc0","modified":1568446651303},{"_id":"themes/inside/lib/generator/entries/tags.js","hash":"e462331c70fa1202e2376bb6a441e2001599f9b4","modified":1568446651303},{"_id":"themes/inside/test/scripts/filters/index.js","hash":"6d3d9f945edeac1041392db2c8a71d8e4ee8f2ad","modified":1568446651314},{"_id":"themes/inside/test/scripts/filters/template.js","hash":"fb2af77fa87a9c3bf167d2b99bb255ee982b91a9","modified":1568446651314},{"_id":"themes/inside/test/scripts/helpers/ga.js","hash":"10922cd6920121846c10f00c27d40bdc1707e2c8","modified":1568446651314},{"_id":"themes/inside/test/scripts/helpers/index.js","hash":"bfefb20e24d48ca6a130e655d862f929d7ffb43c","modified":1568446651315},{"_id":"themes/inside/test/scripts/helpers/structured_data.js","hash":"8878e0177631c71515820bb10c1084c21e4de6f8","modified":1568446651315},{"_id":"themes/inside/test/scripts/filters/post.js","hash":"59dace4aec7f4d1d98d82d1677174489a826b44e","modified":1568446651314},{"_id":"themes/inside/test/scripts/helpers/url_trim.js","hash":"2cabd9aa7b6eb7058288fb50d4cd707874260df6","modified":1568446651315},{"_id":"themes/inside/test/scripts/tags/canvas.js","hash":"df3fd748c6c5d5414e4f84be127fbbcdb37250de","modified":1568446651315},{"_id":"themes/inside/test/scripts/tags/gist.js","hash":"946b40aa186980524bef5ab5d4c0d8c95153f473","modified":1568446651315},{"_id":"themes/inside/test/scripts/tags/index.js","hash":"4ce8c76c53c05fba25bc49fa90a80b75afffa052","modified":1568446651315},{"_id":"themes/inside/test/scripts/utils/index.js","hash":"2bf714d761741f4a4d2e0fb611bcd5155fc69a3d","modified":1568446651315},{"_id":"themes/inside/test/scripts/utils/parseConfig.js","hash":"922aa8f4d7b2cdc29de07d14c1ade62f53759ec8","modified":1568446651315},{"_id":"themes/inside/test/scripts/utils/rest.js","hash":"b328280ec61c25462d88e64fd8259bd85610e815","modified":1568446651316},{"_id":"themes/inside/source/main.dec5dcd89e85221e092e.zh-Hant.js","hash":"36308c9df2ee443649a7ab25afa63604d045767e","modified":1568446651312},{"_id":"themes/inside/source/main.45d1e4209486560b00ce.ja.js","hash":"b143a362ec81151eb1c2448827a1159e4cac10b0","modified":1568446651311},{"_id":"themes/inside/source/main.5f57ed8aacba80770b83.zh-Hans.js","hash":"6a99b8c0d03f834760b30617153f7b9d93c5dd6e","modified":1568446651311},{"_id":"themes/inside/source/main.3c8fe2175e9d028e033b.js","hash":"a862bceb7bf525cc7ac02392e361a5446b96f77d","modified":1568446651310},{"_id":"source/_posts/test.md","hash":"a4d115b44726ee43a15533000d9bbe55ca496892","modified":1593598092884},{"_id":"public/config.6c4efa67db801977989b.js","hash":"0932ee9cc02209018ab838435124c38d3f7242f4","modified":1593619336962},{"_id":"public/theme.6814db2ccf672c87c4fb.css","hash":"7bb07b065f0a3cac489bf2b71724ec7030cda1d6","modified":1593619336963},{"_id":"public/api/MjAyMC8wNy8wMS90ZXN0.json","hash":"d1d96c553fa12ac0810d74eaee3532966ed93247","modified":1593619336969},{"_id":"public/api/MjAyMC8wNy8wMS/nvZHlhbPkuoznuqfnm67lvZXliY3nq6/phY3nva4.json","hash":"ef8fa987b5a3d2287e5a3949be0d0fd42a161895","modified":1593619336969},{"_id":"public/api/MjAxOS8wOS8xNC/mkK3lu7pnaXRsYWLmnI3liqE.json","hash":"7f06fe37d7442e637b3f966bd76147fd294f5d59","modified":1593619336969},{"_id":"public/api/MjAxOS8wOS8yMi9naXTluLjnlKjlkb3ku6TorrDlvZU.json","hash":"75c93ac18790cce7511c88acd69d0bd8e447bb32","modified":1593619336969},{"_id":"public/api/cGFnZQ.json","hash":"51e2bb09823db2f20f884212cc93dd6cb9bcef64","modified":1593619336969},{"_id":"public/sitemap.xml","hash":"f1946067e0c91b5c5db4fff331f2dde58fc790eb","modified":1593619336970},{"_id":"public/api/YXJjaGl2ZXM.json","hash":"b126e25c959c0f2442d536c1ecbf09aed251e604","modified":1593619336970},{"_id":"public/404/index.html","hash":"1bcbf1ae353284d35b55cdfb9b1ea6db1bf83a10","modified":1593619336971},{"_id":"public/2020/07/01/test/index.html","hash":"7b283c298f8ccaf43f7b4a681fc5dfd7b3cb1e99","modified":1593619336971},{"_id":"public/2020/07/01/网关二级目录前端配置/index.html","hash":"3bff9af67f944f51ffecb6941c11c7c458760602","modified":1593619336971},{"_id":"public/2019/09/22/git常用命令记录/index.html","hash":"f55094e0a05819c25249f8e09e5c91fe55bb928d","modified":1593619336972},{"_id":"public/2019/09/14/搭建gitlab服务/index.html","hash":"33a77348188b0c665f691172b004de3c66e04392","modified":1593619336972},{"_id":"public/index.html","hash":"ba314844fc14972c9725b385c4993ddee5c4c5fc","modified":1593619336972},{"_id":"public/archives/index.html","hash":"f9f6f1b90dd8a5413b969e39432fd50fb191be2d","modified":1593619336972},{"_id":"public/runtime.caef73fae70e33459c5a.js","hash":"a9aafcf49f49145093fc831efd9b8e2f6c71bb9c","modified":1593619336974},{"_id":"public/styles.9477318680c7e6b720a2.css","hash":"60accb10d7b362e3083ef9949ec8dfd49d8cdd25","modified":1593619336978},{"_id":"public/polyfills.28555e618578fe61f50a.js","hash":"3f2bda6f4ad460988984e0da6cd479ef66ea7a79","modified":1593619336980},{"_id":"public/main.5f57ed8aacba80770b83.zh-Hans.js","hash":"6a99b8c0d03f834760b30617153f7b9d93c5dd6e","modified":1593619336983}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"网关二级目录前端配置","description":"to B 的项目, 大部分情况不使用系统自身登录系统, 可能存在域登录, 获取网关统一认证. 目前来说遇到的过网关登录的情况较多, 在此记录一下存在二级目录的情况下, 前端的项目需要做好哪些准备.","_content":"\n> ToB 的项目, 大部分情况不使用系统自身登录系统, 可能存在域登录, 获取网关统一认证. 目前来说遇到的过网关登录的情况较多, 在此记录一下存在二级目录的情况下, 前端的项目需要做好哪些准备.\n\n<!--more-->\n\n---\n\n**网关给系统配置了二级目录, 也就是说, 所有请求发起时, 都要带上类似 \"/projectId\" 的前缀. 那么前端需要思考的就是, 在请求发起前, 加上二级目录的前缀.**\n\n需要前端统一管理的请求:\n```\n1. 页面 url\n2. 异步请求\n3. script|link|img|a 等标签资源加载\n4. Image|FontFace 等资源加载构造函数\n5. window.open|window.location.replace 等跳转方法\n```\n\n---\n\n### 前端配置\n\n> 此文章以 vue 为例, 并使用 history 模式, 单页面, 制作解决方案, react 可使用相似方法进行处理\n\n#### 1. 页面 url 处理\n\n> 需求: 原路由均需添加 \"/projectId\" 一级路由. ()\n\n```js\n// 使用 baseURL\nconst router = new VueRouter({\n  mode: 'history',\n  base: `${baseURL}`\n})\n```\n\n给 vue-router 添加 base 参数, 项目中使用其方法无需再考虑前缀问题\n\n---\n\n#### 2. 异步请求\n\n> 需求: 所有异步请求, 添加 \"/projectId\" 前缀\n\n```js\nconst fetch = axios.create({\n  baseURL: baseURL || undefined,\n})\n```\n\n封装 axios 时, 使用 baseURL\n\n---\n\n#### 3. 标签资源加载\n\n> 需求 1: build 生成的 html 文件自动添加 \"/projectId\" 前缀\n\n> 需求 2: 使用 img|a 等资源标签, 遇上无 origin 的 链接时, 自动添加 \"/projectId\"\n\n```js\n// 构建 inject 可修改 vue.config.js\nmodule.exports = {\n  publicPath: baseURL + '/static/',\n  ...\n}\n```\n\n```html\n<!-- 模板标签引用资源, 使用 BASE_URL-->\n<link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n```\n\nbaseURL 作为二级目录, /static 为方便 nginx 配置前端脚本资源目录\n\n```\n解决 img|a 等资源标签加载, 自定义指令, 重新赋值 src|link 地址类型属性\n```\n\n---\n\n#### 4. Image|FontFace 等资源加载构造函数\n\n```js\nfunction NewImage (...args) {\n  let url = args[0]\n  let src = /^http/.test(url) ? baseUrl + url : url\n  const image = new Image(...args.splice(1))\n\n  image.src = src\n  return image\n}\n```\n\n使用封装后的 Image 构造函数(此处随意封装, 具体使用根据项目需要)\n\n---\n\n\n#### 5. window.open|window.location.replace 等跳转方法\n\n同上解决即可\n\n---\n\n### nginx 测试配置\n\n```conf\n# 前端资源配置\nserver {\n  listen 84;\n  server_name domain;\n  # /static/ 作为静态资源根路径, 指向 dist 前端生成文件目录\n  location ^~ /static/ {\n    alias /Volumes/dev-1/project/dist/;\n  }\n\n  # 多页面配置\n  # /form/*? form/index.html 页面指向路由\n  location ^~ /form/ {\n    root /Volumes/dev-1/project/dist;\n    try_files $uri $uri/ /form/index.html;\n  }\n  # /admin/*? admin/index.html 页面指向路由\n  location ^~ /admin/ {\n    root /Volumes/dev-1/project/dist;\n    try_files $uri $uri/ /admin/index.html;\n  }\n  # 单页面配置\n  location / {\n    # proxy_pass server_host; 后端接口代理根据项目情况配置\n    root /Volumes/dev-1/project/dist;\n    try_files $uri $uri/ /index.html;\n  }\n}\nserver {\n  listen 80;\n  location ^~ /projectid/ {\n    proxy_pass http://localhost:84/;\n  } \n}\n```\n\n持续记录 ing ...","source":"_posts/网关二级目录前端配置.md","raw":"---\ntitle: 网关二级目录前端配置\ndescription: to B 的项目, 大部分情况不使用系统自身登录系统, 可能存在域登录, 获取网关统一认证. 目前来说遇到的过网关登录的情况较多, 在此记录一下存在二级目录的情况下, 前端的项目需要做好哪些准备.\n---\n\n> ToB 的项目, 大部分情况不使用系统自身登录系统, 可能存在域登录, 获取网关统一认证. 目前来说遇到的过网关登录的情况较多, 在此记录一下存在二级目录的情况下, 前端的项目需要做好哪些准备.\n\n<!--more-->\n\n---\n\n**网关给系统配置了二级目录, 也就是说, 所有请求发起时, 都要带上类似 \"/projectId\" 的前缀. 那么前端需要思考的就是, 在请求发起前, 加上二级目录的前缀.**\n\n需要前端统一管理的请求:\n```\n1. 页面 url\n2. 异步请求\n3. script|link|img|a 等标签资源加载\n4. Image|FontFace 等资源加载构造函数\n5. window.open|window.location.replace 等跳转方法\n```\n\n---\n\n### 前端配置\n\n> 此文章以 vue 为例, 并使用 history 模式, 单页面, 制作解决方案, react 可使用相似方法进行处理\n\n#### 1. 页面 url 处理\n\n> 需求: 原路由均需添加 \"/projectId\" 一级路由. ()\n\n```js\n// 使用 baseURL\nconst router = new VueRouter({\n  mode: 'history',\n  base: `${baseURL}`\n})\n```\n\n给 vue-router 添加 base 参数, 项目中使用其方法无需再考虑前缀问题\n\n---\n\n#### 2. 异步请求\n\n> 需求: 所有异步请求, 添加 \"/projectId\" 前缀\n\n```js\nconst fetch = axios.create({\n  baseURL: baseURL || undefined,\n})\n```\n\n封装 axios 时, 使用 baseURL\n\n---\n\n#### 3. 标签资源加载\n\n> 需求 1: build 生成的 html 文件自动添加 \"/projectId\" 前缀\n\n> 需求 2: 使用 img|a 等资源标签, 遇上无 origin 的 链接时, 自动添加 \"/projectId\"\n\n```js\n// 构建 inject 可修改 vue.config.js\nmodule.exports = {\n  publicPath: baseURL + '/static/',\n  ...\n}\n```\n\n```html\n<!-- 模板标签引用资源, 使用 BASE_URL-->\n<link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\">\n```\n\nbaseURL 作为二级目录, /static 为方便 nginx 配置前端脚本资源目录\n\n```\n解决 img|a 等资源标签加载, 自定义指令, 重新赋值 src|link 地址类型属性\n```\n\n---\n\n#### 4. Image|FontFace 等资源加载构造函数\n\n```js\nfunction NewImage (...args) {\n  let url = args[0]\n  let src = /^http/.test(url) ? baseUrl + url : url\n  const image = new Image(...args.splice(1))\n\n  image.src = src\n  return image\n}\n```\n\n使用封装后的 Image 构造函数(此处随意封装, 具体使用根据项目需要)\n\n---\n\n\n#### 5. window.open|window.location.replace 等跳转方法\n\n同上解决即可\n\n---\n\n### nginx 测试配置\n\n```conf\n# 前端资源配置\nserver {\n  listen 84;\n  server_name domain;\n  # /static/ 作为静态资源根路径, 指向 dist 前端生成文件目录\n  location ^~ /static/ {\n    alias /Volumes/dev-1/project/dist/;\n  }\n\n  # 多页面配置\n  # /form/*? form/index.html 页面指向路由\n  location ^~ /form/ {\n    root /Volumes/dev-1/project/dist;\n    try_files $uri $uri/ /form/index.html;\n  }\n  # /admin/*? admin/index.html 页面指向路由\n  location ^~ /admin/ {\n    root /Volumes/dev-1/project/dist;\n    try_files $uri $uri/ /admin/index.html;\n  }\n  # 单页面配置\n  location / {\n    # proxy_pass server_host; 后端接口代理根据项目情况配置\n    root /Volumes/dev-1/project/dist;\n    try_files $uri $uri/ /index.html;\n  }\n}\nserver {\n  listen 80;\n  location ^~ /projectid/ {\n    proxy_pass http://localhost:84/;\n  } \n}\n```\n\n持续记录 ing ...","slug":"网关二级目录前端配置","published":1,"date":"2020-07-01T09:53:29.942Z","updated":"2020-07-01T09:53:29.943Z","comments":0,"layout":"post","photos":[],"link":"2020/07/01/网关二级目录前端配置","_id":"ckc375agi00005f6mqxoybkbi","content":"<blockquote>\n<p>ToB 的项目, 大部分情况不使用系统自身登录系统, 可能存在域登录, 获取网关统一认证. 目前来说遇到的过网关登录的情况较多, 在此记录一下存在二级目录的情况下, 前端的项目需要做好哪些准备.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<hr>\n<p><strong>网关给系统配置了二级目录, 也就是说, 所有请求发起时, 都要带上类似 “/projectId” 的前缀. 那么前端需要思考的就是, 在请求发起前, 加上二级目录的前缀.</strong></p>\n<p>需要前端统一管理的请求:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 页面 url</span><br><span class=\"line\">2. 异步请求</span><br><span class=\"line\">3. script|link|img|a 等标签资源加载</span><br><span class=\"line\">4. Image|FontFace 等资源加载构造函数</span><br><span class=\"line\">5. window.open|window.location.replace 等跳转方法</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h3 id=\"前端配置\">前端配置<a href=\"2020/07/01/网关二级目录前端配置#前端配置\"></a></h3><blockquote>\n<p>此文章以 vue 为例, 并使用 history 模式, 单页面, 制作解决方案, react 可使用相似方法进行处理</p>\n</blockquote>\n<h4 id=\"1-页面-url-处理\">1. 页面 url 处理<a href=\"2020/07/01/网关二级目录前端配置#1-页面-url-处理\"></a></h4><blockquote>\n<p>需求: 原路由均需添加 “/projectId” 一级路由. ()</p>\n</blockquote>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 baseURL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  base: <span class=\"string\">`<span class=\"subst\">$&#123;baseURL&#125;</span>`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<p>给 vue-router 添加 base 参数, 项目中使用其方法无需再考虑前缀问题</p>\n<hr>\n<h4 id=\"2-异步请求\">2. 异步请求<a href=\"2020/07/01/网关二级目录前端配置#2-异步请求\"></a></h4><blockquote>\n<p>需求: 所有异步请求, 添加 “/projectId” 前缀</p>\n</blockquote>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fetch = axios.create(&#123;</span><br><span class=\"line\">  baseURL: baseURL || <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<p>封装 axios 时, 使用 baseURL</p>\n<hr>\n<h4 id=\"3-标签资源加载\">3. 标签资源加载<a href=\"2020/07/01/网关二级目录前端配置#3-标签资源加载\"></a></h4><blockquote>\n<p>需求 1: build 生成的 html 文件自动添加 “/projectId” 前缀</p>\n</blockquote>\n<blockquote>\n<p>需求 2: 使用 img|a 等资源标签, 遇上无 origin 的 链接时, 自动添加 “/projectId”</p>\n</blockquote>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建 inject 可修改 vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  publicPath: baseURL + <span class=\"string\">'/static/'</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight html\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 模板标签引用资源, 使用 BASE_URL--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= BASE_URL %&gt;favicon.ico\"</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>baseURL 作为二级目录, /static 为方便 nginx 配置前端脚本资源目录</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决 img|a 等资源标签加载, 自定义指令, 重新赋值 src|link 地址类型属性</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h4 id=\"4-Image-FontFace-等资源加载构造函数\">4. Image|FontFace 等资源加载构造函数<a href=\"2020/07/01/网关二级目录前端配置#4-Image-FontFace-等资源加载构造函数\"></a></h4><figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NewImage</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> src = <span class=\"regexp\">/^http/</span>.test(url) ? baseUrl + url : url</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image(...args.splice(<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  image.src = src</span><br><span class=\"line\">  <span class=\"keyword\">return</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>使用封装后的 Image 构造函数(此处随意封装, 具体使用根据项目需要)</p>\n<hr>\n<h4 id=\"5-window-open-window-location-replace-等跳转方法\">5. window.open|window.location.replace 等跳转方法<a href=\"2020/07/01/网关二级目录前端配置#5-window-open-window-location-replace-等跳转方法\"></a></h4><p>同上解决即可</p>\n<hr>\n<h3 id=\"nginx-测试配置\">nginx 测试配置<a href=\"2020/07/01/网关二级目录前端配置#nginx-测试配置\"></a></h3><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 前端资源配置</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 84;</span><br><span class=\"line\">  server_name domain;</span><br><span class=\"line\">  # /static/ 作为静态资源根路径, 指向 dist 前端生成文件目录</span><br><span class=\"line\">  location ^~ /static/ &#123;</span><br><span class=\"line\">    alias /Volumes/dev-1/project/dist/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 多页面配置</span><br><span class=\"line\">  # /form/*? form/index.html 页面指向路由</span><br><span class=\"line\">  location ^~ /form/ &#123;</span><br><span class=\"line\">    root /Volumes/dev-1/project/dist;</span><br><span class=\"line\">    try_files $uri $uri/ /form/index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  # /admin/*? admin/index.html 页面指向路由</span><br><span class=\"line\">  location ^~ /admin/ &#123;</span><br><span class=\"line\">    root /Volumes/dev-1/project/dist;</span><br><span class=\"line\">    try_files $uri $uri/ /admin/index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  # 单页面配置</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    # proxy_pass server_host; 后端接口代理根据项目情况配置</span><br><span class=\"line\">    root /Volumes/dev-1/project/dist;</span><br><span class=\"line\">    try_files $uri $uri/ /index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  location ^~ /projectid/ &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:84/;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>持续记录 ing …</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>ToB 的项目, 大部分情况不使用系统自身登录系统, 可能存在域登录, 获取网关统一认证. 目前来说遇到的过网关登录的情况较多, 在此记录一下存在二级目录的情况下, 前端的项目需要做好哪些准备.</p>\n</blockquote>","more":"<hr>\n<p><strong>网关给系统配置了二级目录, 也就是说, 所有请求发起时, 都要带上类似 “/projectId” 的前缀. 那么前端需要思考的就是, 在请求发起前, 加上二级目录的前缀.</strong></p>\n<p>需要前端统一管理的请求:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 页面 url</span><br><span class=\"line\">2. 异步请求</span><br><span class=\"line\">3. script|link|img|a 等标签资源加载</span><br><span class=\"line\">4. Image|FontFace 等资源加载构造函数</span><br><span class=\"line\">5. window.open|window.location.replace 等跳转方法</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"前端配置\"><a href=\"#前端配置\" class=\"headerlink\" title=\"前端配置\"></a>前端配置</h3><blockquote>\n<p>此文章以 vue 为例, 并使用 history 模式, 单页面, 制作解决方案, react 可使用相似方法进行处理</p>\n</blockquote>\n<h4 id=\"1-页面-url-处理\"><a href=\"#1-页面-url-处理\" class=\"headerlink\" title=\"1. 页面 url 处理\"></a>1. 页面 url 处理</h4><blockquote>\n<p>需求: 原路由均需添加 “/projectId” 一级路由. ()</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 baseURL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'history'</span>,</span><br><span class=\"line\">  base: <span class=\"string\">`<span class=\"subst\">$&#123;baseURL&#125;</span>`</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>给 vue-router 添加 base 参数, 项目中使用其方法无需再考虑前缀问题</p>\n<hr>\n<h4 id=\"2-异步请求\"><a href=\"#2-异步请求\" class=\"headerlink\" title=\"2. 异步请求\"></a>2. 异步请求</h4><blockquote>\n<p>需求: 所有异步请求, 添加 “/projectId” 前缀</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fetch = axios.create(&#123;</span><br><span class=\"line\">  baseURL: baseURL || <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>封装 axios 时, 使用 baseURL</p>\n<hr>\n<h4 id=\"3-标签资源加载\"><a href=\"#3-标签资源加载\" class=\"headerlink\" title=\"3. 标签资源加载\"></a>3. 标签资源加载</h4><blockquote>\n<p>需求 1: build 生成的 html 文件自动添加 “/projectId” 前缀</p>\n</blockquote>\n<blockquote>\n<p>需求 2: 使用 img|a 等资源标签, 遇上无 origin 的 链接时, 自动添加 “/projectId”</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构建 inject 可修改 vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  publicPath: baseURL + <span class=\"string\">'/static/'</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 模板标签引用资源, 使用 BASE_URL--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;%= BASE_URL %&gt;favicon.ico\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>baseURL 作为二级目录, /static 为方便 nginx 配置前端脚本资源目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决 img|a 等资源标签加载, 自定义指令, 重新赋值 src|link 地址类型属性</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4-Image-FontFace-等资源加载构造函数\"><a href=\"#4-Image-FontFace-等资源加载构造函数\" class=\"headerlink\" title=\"4. Image|FontFace 等资源加载构造函数\"></a>4. Image|FontFace 等资源加载构造函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NewImage</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> url = args[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">let</span> src = <span class=\"regexp\">/^http/</span>.test(url) ? baseUrl + url : url</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image(...args.splice(<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  image.src = src</span><br><span class=\"line\">  <span class=\"keyword\">return</span> image</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用封装后的 Image 构造函数(此处随意封装, 具体使用根据项目需要)</p>\n<hr>\n<h4 id=\"5-window-open-window-location-replace-等跳转方法\"><a href=\"#5-window-open-window-location-replace-等跳转方法\" class=\"headerlink\" title=\"5. window.open|window.location.replace 等跳转方法\"></a>5. window.open|window.location.replace 等跳转方法</h4><p>同上解决即可</p>\n<hr>\n<h3 id=\"nginx-测试配置\"><a href=\"#nginx-测试配置\" class=\"headerlink\" title=\"nginx 测试配置\"></a>nginx 测试配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 前端资源配置</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 84;</span><br><span class=\"line\">  server_name domain;</span><br><span class=\"line\">  # /static/ 作为静态资源根路径, 指向 dist 前端生成文件目录</span><br><span class=\"line\">  location ^~ /static/ &#123;</span><br><span class=\"line\">    alias /Volumes/dev-1/project/dist/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  # 多页面配置</span><br><span class=\"line\">  # /form/*? form/index.html 页面指向路由</span><br><span class=\"line\">  location ^~ /form/ &#123;</span><br><span class=\"line\">    root /Volumes/dev-1/project/dist;</span><br><span class=\"line\">    try_files $uri $uri/ /form/index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  # /admin/*? admin/index.html 页面指向路由</span><br><span class=\"line\">  location ^~ /admin/ &#123;</span><br><span class=\"line\">    root /Volumes/dev-1/project/dist;</span><br><span class=\"line\">    try_files $uri $uri/ /admin/index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  # 单页面配置</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    # proxy_pass server_host; 后端接口代理根据项目情况配置</span><br><span class=\"line\">    root /Volumes/dev-1/project/dist;</span><br><span class=\"line\">    try_files $uri $uri/ /index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\">  location ^~ /projectid/ &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:84/;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>持续记录 ing …</p>","plink":"http://xiaoYown.github.io/2020/07/01/网关二级目录前端配置/","type":"post"},{"title":"搭建 gitlab 服务","description":"私有的项目管理仓库, 对于任何一个公司来说都是必须的. 所以, 作为一名开发人员, 如何搭建一个 gitlab 服务, 是一个很有必要的技能.","_content":"\n> 私有的项目管理仓库, 对于任何一个公司来说都是必须的. 所以, 作为一名开发人员, 如何搭建一个 gitlab 服务, 是一个很有必要的技能.\n\n<!--more-->\n\n---\n\n## 安装\n\n> [文档参考](https://about.gitlab.com/install/#ubuntu)\n\n### 1. 安装必要依赖\n\n```\nsudo apt-get update\nsudo apt-get install -y curl openssh-server ca-eertificates\n```\n\n安装 postfix 用来发送通知电子邮件\n\n```\nsudo apt-get install -y postfix\n```\n\n### 2. 添加 gitlab 包仓库并安装包\n\n```\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n```\n\n安装 gitlab 包并配置 访问地址\n\n```\n# EXTERANL_URL 后期可通过文件 /etc/gitlab/gitlab.rb 修改\nsudo EXTERNAL_URL=\"http://localhost:8010\" apt-get install gitlab-ee\n```\n\n完成以上步骤即可通过访问 EXTERNAL_URL 访问 gitlab.\n\n---\n\n## 安装过程遇到的一些问题\n\n### 1. 安装 gitlab-ee 失败\n\n> error: Unable to locate package gitlab-ee\n\n```\nsudo apt-get install gitlab-ee\n\n报错 Unable to locate package gitlab-ee\n```\n\n> 解决方法\n\n修改 /etc/apt/sources.list.d/gitlab_gitlab-ee.list\n\n```\ndeb https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ cosmic main\ndeb-src https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ cosmic main\n```\n\n改成:\n\n```\ndeb https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ xenial main\ndeb-src https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ xenial main\n\n```\n\n修改后重新安装:\n\n```\nsudo apt-get update\nsudo apt-get install gitlab-ee\n```\n\n---\n\n### 2. 访问 502\n\n```\nvim /etc/gitlab/gitlab.rb\n```\n\n修改:\n\n```\nexternal_url 'http://localhost:8010'\nunicorn['port'] = 8088\npostgresql['shared_buffers'] = \"256MB\"\npostgresql['max_connections'] = 200\n```\n\n```\n# 重新设置配置文件\nsudo gitlab-ctl reconfigure\n# 重启\ngitlab-ctl restart \n```\n\n---\n\n### 3. 修改 clone 地址\n\n```\nsudo vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml\n```\n\n---\n\n## 常用命令\n\n| 命令功能 | 执行命令 |\n|-|-|\n| 重启配置并启动 gitlab 服务 | sudo gitlab-ctl reconfigure |\n| 启动所有 | gitlab\tsudo gitlab-ctl start |\n| 重新启动GitLab | sudo gitlab-ctl restart |\n| 停止所有 | gitlab sudo gitlab-ctl stop |\n| 查看服务状态 | sudo gitlab-ctl status |\n| 查看Gitlab日志 | sudo gitlab-ctl tail |\n| 修改默认的配置文件 | sudo vim /etc/gitlab/gitlab.rb |\n| 检查gitlab | gitlab-rake gitlab:check SANITIZE=true --trace |","source":"_posts/搭建gitlab服务.md","raw":"---\ntitle: 搭建 gitlab 服务\ndescription: 私有的项目管理仓库, 对于任何一个公司来说都是必须的. 所以, 作为一名开发人员, 如何搭建一个 gitlab 服务, 是一个很有必要的技能.\n---\n\n> 私有的项目管理仓库, 对于任何一个公司来说都是必须的. 所以, 作为一名开发人员, 如何搭建一个 gitlab 服务, 是一个很有必要的技能.\n\n<!--more-->\n\n---\n\n## 安装\n\n> [文档参考](https://about.gitlab.com/install/#ubuntu)\n\n### 1. 安装必要依赖\n\n```\nsudo apt-get update\nsudo apt-get install -y curl openssh-server ca-eertificates\n```\n\n安装 postfix 用来发送通知电子邮件\n\n```\nsudo apt-get install -y postfix\n```\n\n### 2. 添加 gitlab 包仓库并安装包\n\n```\ncurl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n```\n\n安装 gitlab 包并配置 访问地址\n\n```\n# EXTERANL_URL 后期可通过文件 /etc/gitlab/gitlab.rb 修改\nsudo EXTERNAL_URL=\"http://localhost:8010\" apt-get install gitlab-ee\n```\n\n完成以上步骤即可通过访问 EXTERNAL_URL 访问 gitlab.\n\n---\n\n## 安装过程遇到的一些问题\n\n### 1. 安装 gitlab-ee 失败\n\n> error: Unable to locate package gitlab-ee\n\n```\nsudo apt-get install gitlab-ee\n\n报错 Unable to locate package gitlab-ee\n```\n\n> 解决方法\n\n修改 /etc/apt/sources.list.d/gitlab_gitlab-ee.list\n\n```\ndeb https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ cosmic main\ndeb-src https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ cosmic main\n```\n\n改成:\n\n```\ndeb https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ xenial main\ndeb-src https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ xenial main\n\n```\n\n修改后重新安装:\n\n```\nsudo apt-get update\nsudo apt-get install gitlab-ee\n```\n\n---\n\n### 2. 访问 502\n\n```\nvim /etc/gitlab/gitlab.rb\n```\n\n修改:\n\n```\nexternal_url 'http://localhost:8010'\nunicorn['port'] = 8088\npostgresql['shared_buffers'] = \"256MB\"\npostgresql['max_connections'] = 200\n```\n\n```\n# 重新设置配置文件\nsudo gitlab-ctl reconfigure\n# 重启\ngitlab-ctl restart \n```\n\n---\n\n### 3. 修改 clone 地址\n\n```\nsudo vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml\n```\n\n---\n\n## 常用命令\n\n| 命令功能 | 执行命令 |\n|-|-|\n| 重启配置并启动 gitlab 服务 | sudo gitlab-ctl reconfigure |\n| 启动所有 | gitlab\tsudo gitlab-ctl start |\n| 重新启动GitLab | sudo gitlab-ctl restart |\n| 停止所有 | gitlab sudo gitlab-ctl stop |\n| 查看服务状态 | sudo gitlab-ctl status |\n| 查看Gitlab日志 | sudo gitlab-ctl tail |\n| 修改默认的配置文件 | sudo vim /etc/gitlab/gitlab.rb |\n| 检查gitlab | gitlab-rake gitlab:check SANITIZE=true --trace |","slug":"搭建gitlab服务","published":1,"date":"2019-09-14T06:57:04.839Z","updated":"2019-09-22T15:48:03.925Z","comments":0,"layout":"post","photos":[],"link":"2019/09/14/搭建gitlab服务","_id":"ckc375agn00015f6m5m5kmg67","content":"<blockquote>\n<p>私有的项目管理仓库, 对于任何一个公司来说都是必须的. 所以, 作为一名开发人员, 如何搭建一个 gitlab 服务, 是一个很有必要的技能.</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<hr>\n<h2 id=\"安装\">安装<a href=\"2019/09/14/搭建gitlab服务#安装\"></a></h2><blockquote>\n<p><a href=\"https://about.gitlab.com/install/#ubuntu\" target=\"_blank\" rel=\"noopener\">文档参考</a></p>\n</blockquote>\n<h3 id=\"1-安装必要依赖\">1. 安装必要依赖<a href=\"2019/09/14/搭建gitlab服务#1-安装必要依赖\"></a></h3><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install -y curl openssh-server ca-eertificates</span><br></pre></td></tr></table></div></figure>\n\n<p>安装 postfix 用来发送通知电子邮件</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y postfix</span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"2-添加-gitlab-包仓库并安装包\">2. 添加 gitlab 包仓库并安装包<a href=\"2019/09/14/搭建gitlab服务#2-添加-gitlab-包仓库并安装包\"></a></h3><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash</span><br></pre></td></tr></table></div></figure>\n\n<p>安装 gitlab 包并配置 访问地址</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># EXTERANL_URL 后期可通过文件 /etc/gitlab/gitlab.rb 修改</span><br><span class=\"line\">sudo EXTERNAL_URL=&quot;http://localhost:8010&quot; apt-get install gitlab-ee</span><br></pre></td></tr></table></div></figure>\n\n<p>完成以上步骤即可通过访问 EXTERNAL_URL 访问 gitlab.</p>\n<hr>\n<h2 id=\"安装过程遇到的一些问题\">安装过程遇到的一些问题<a href=\"2019/09/14/搭建gitlab服务#安装过程遇到的一些问题\"></a></h2><h3 id=\"1-安装-gitlab-ee-失败\">1. 安装 gitlab-ee 失败<a href=\"2019/09/14/搭建gitlab服务#1-安装-gitlab-ee-失败\"></a></h3><blockquote>\n<p>error: Unable to locate package gitlab-ee</p>\n</blockquote>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gitlab-ee</span><br><span class=\"line\"></span><br><span class=\"line\">报错 Unable to locate package gitlab-ee</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>解决方法</p>\n</blockquote>\n<p>修改 /etc/apt/sources.list.d/gitlab_gitlab-ee.list</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ cosmic main</span><br><span class=\"line\">deb-src https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ cosmic main</span><br></pre></td></tr></table></div></figure>\n\n<p>改成:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ xenial main</span><br><span class=\"line\">deb-src https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ xenial main</span><br></pre></td></tr></table></div></figure>\n\n<p>修改后重新安装:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gitlab-ee</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h3 id=\"2-访问-502\">2. 访问 502<a href=\"2019/09/14/搭建gitlab服务#2-访问-502\"></a></h3><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></div></figure>\n\n<p>修改:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url &apos;http://localhost:8010&apos;</span><br><span class=\"line\">unicorn[&apos;port&apos;] = 8088</span><br><span class=\"line\">postgresql[&apos;shared_buffers&apos;] = &quot;256MB&quot;</span><br><span class=\"line\">postgresql[&apos;max_connections&apos;] = 200</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重新设置配置文件</span><br><span class=\"line\">sudo gitlab-ctl reconfigure</span><br><span class=\"line\"># 重启</span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h3 id=\"3-修改-clone-地址\">3. 修改 clone 地址<a href=\"2019/09/14/搭建gitlab服务#3-修改-clone-地址\"></a></h3><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br></pre></td></tr></table></div></figure>\n\n<hr>\n<h2 id=\"常用命令\">常用命令<a href=\"2019/09/14/搭建gitlab服务#常用命令\"></a></h2><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>命令功能</th>\n<th>执行命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>重启配置并启动 gitlab 服务</td>\n<td>sudo gitlab-ctl reconfigure</td>\n</tr>\n<tr>\n<td>启动所有</td>\n<td>gitlab    sudo gitlab-ctl start</td>\n</tr>\n<tr>\n<td>重新启动GitLab</td>\n<td>sudo gitlab-ctl restart</td>\n</tr>\n<tr>\n<td>停止所有</td>\n<td>gitlab sudo gitlab-ctl stop</td>\n</tr>\n<tr>\n<td>查看服务状态</td>\n<td>sudo gitlab-ctl status</td>\n</tr>\n<tr>\n<td>查看Gitlab日志</td>\n<td>sudo gitlab-ctl tail</td>\n</tr>\n<tr>\n<td>修改默认的配置文件</td>\n<td>sudo vim /etc/gitlab/gitlab.rb</td>\n</tr>\n<tr>\n<td>检查gitlab</td>\n<td>gitlab-rake gitlab:check SANITIZE=true –trace</td>\n</tr>\n</tbody></table></div></div>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>私有的项目管理仓库, 对于任何一个公司来说都是必须的. 所以, 作为一名开发人员, 如何搭建一个 gitlab 服务, 是一个很有必要的技能.</p>\n</blockquote>","more":"<hr>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p><a href=\"https://about.gitlab.com/install/#ubuntu\" target=\"_blank\" rel=\"noopener\">文档参考</a></p>\n</blockquote>\n<h3 id=\"1-安装必要依赖\"><a href=\"#1-安装必要依赖\" class=\"headerlink\" title=\"1. 安装必要依赖\"></a>1. 安装必要依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install -y curl openssh-server ca-eertificates</span><br></pre></td></tr></table></figure>\n\n<p>安装 postfix 用来发送通知电子邮件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y postfix</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-添加-gitlab-包仓库并安装包\"><a href=\"#2-添加-gitlab-包仓库并安装包\" class=\"headerlink\" title=\"2. 添加 gitlab 包仓库并安装包\"></a>2. 添加 gitlab 包仓库并安装包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash</span><br></pre></td></tr></table></figure>\n\n<p>安装 gitlab 包并配置 访问地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># EXTERANL_URL 后期可通过文件 /etc/gitlab/gitlab.rb 修改</span><br><span class=\"line\">sudo EXTERNAL_URL=&quot;http://localhost:8010&quot; apt-get install gitlab-ee</span><br></pre></td></tr></table></figure>\n\n<p>完成以上步骤即可通过访问 EXTERNAL_URL 访问 gitlab.</p>\n<hr>\n<h2 id=\"安装过程遇到的一些问题\"><a href=\"#安装过程遇到的一些问题\" class=\"headerlink\" title=\"安装过程遇到的一些问题\"></a>安装过程遇到的一些问题</h2><h3 id=\"1-安装-gitlab-ee-失败\"><a href=\"#1-安装-gitlab-ee-失败\" class=\"headerlink\" title=\"1. 安装 gitlab-ee 失败\"></a>1. 安装 gitlab-ee 失败</h3><blockquote>\n<p>error: Unable to locate package gitlab-ee</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gitlab-ee</span><br><span class=\"line\"></span><br><span class=\"line\">报错 Unable to locate package gitlab-ee</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>解决方法</p>\n</blockquote>\n<p>修改 /etc/apt/sources.list.d/gitlab_gitlab-ee.list</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ cosmic main</span><br><span class=\"line\">deb-src https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ cosmic main</span><br></pre></td></tr></table></figure>\n\n<p>改成:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ xenial main</span><br><span class=\"line\">deb-src https://packages.gitlab.com/gitlab/gitlab-ee/ubuntu/ xenial main</span><br></pre></td></tr></table></figure>\n\n<p>修改后重新安装:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install gitlab-ee</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"2-访问-502\"><a href=\"#2-访问-502\" class=\"headerlink\" title=\"2. 访问 502\"></a>2. 访问 502</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n\n<p>修改:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">external_url &apos;http://localhost:8010&apos;</span><br><span class=\"line\">unicorn[&apos;port&apos;] = 8088</span><br><span class=\"line\">postgresql[&apos;shared_buffers&apos;] = &quot;256MB&quot;</span><br><span class=\"line\">postgresql[&apos;max_connections&apos;] = 200</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 重新设置配置文件</span><br><span class=\"line\">sudo gitlab-ctl reconfigure</span><br><span class=\"line\"># 重启</span><br><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-修改-clone-地址\"><a href=\"#3-修改-clone-地址\" class=\"headerlink\" title=\"3. 修改 clone 地址\"></a>3. 修改 clone 地址</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><table>\n<thead>\n<tr>\n<th>命令功能</th>\n<th>执行命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>重启配置并启动 gitlab 服务</td>\n<td>sudo gitlab-ctl reconfigure</td>\n</tr>\n<tr>\n<td>启动所有</td>\n<td>gitlab    sudo gitlab-ctl start</td>\n</tr>\n<tr>\n<td>重新启动GitLab</td>\n<td>sudo gitlab-ctl restart</td>\n</tr>\n<tr>\n<td>停止所有</td>\n<td>gitlab sudo gitlab-ctl stop</td>\n</tr>\n<tr>\n<td>查看服务状态</td>\n<td>sudo gitlab-ctl status</td>\n</tr>\n<tr>\n<td>查看Gitlab日志</td>\n<td>sudo gitlab-ctl tail</td>\n</tr>\n<tr>\n<td>修改默认的配置文件</td>\n<td>sudo vim /etc/gitlab/gitlab.rb</td>\n</tr>\n<tr>\n<td>检查gitlab</td>\n<td>gitlab-rake gitlab:check SANITIZE=true –trace</td>\n</tr>\n</tbody></table>","plink":"http://xiaoYown.github.io/2019/09/14/搭建gitlab服务/","type":"post","toc":[{"title":"安装","id":"安装","index":"1","children":[{"title":"1. 安装必要依赖","id":"1-安装必要依赖","index":"1.1"},{"title":"2. 添加 gitlab 包仓库并安装包","id":"2-添加-gitlab-包仓库并安装包","index":"1.2"}]},{"title":"安装过程遇到的一些问题","id":"安装过程遇到的一些问题","index":"2","children":[{"title":"1. 安装 gitlab-ee 失败","id":"1-安装-gitlab-ee-失败","index":"2.1"},{"title":"2. 访问 502","id":"2-访问-502","index":"2.2"},{"title":"3. 修改 clone 地址","id":"3-修改-clone-地址","index":"2.3"}]},{"title":"常用命令","id":"常用命令","index":"3"}]},{"title":"git 常用命令记录","description":"大部分的开发人员都会使用 git，同时依赖依赖客户端管理工具的也很多(我就是一个). 但某些情况下仍然需要使用命令来协助开发, 在此记录一些 git 命令(主要是帮助自己记录 = =).","_content":"\n> 大部分的开发人员都会使用 git，同时依赖依赖客户端管理工具的也很多(我就是一个). 但某些情况下仍然需要使用命令来协助开发, 在此记录一些 git 命令(主要是帮助自己记录 = =).\n\n<!--more-->\n\n---\n\n#### 1. 拉取指定分支到本地\n\n```\ngit clone -b branch_name folder_name \n```\n\n#### 2. 同一分支开发提交 (无冲突)\n\n```\ngit fetch\ngit add\ngit commit -m \"message\"\ngit merge --ff\ngit push\n```\n\n#### 3. 同一分支开发提交 (有冲突)\n\n```\n# 提交代码\n\ngit add\ngit commit -m \"message\"\n\n# 更新远程代码到本地\n\ngit pull --rebase (此时产生冲突)\ngit add .\n\n# 解决冲突后切回原分支\n\ngit rebase --continue\n\n# 追加提交到刚刚没有 merge 的提交中\n\ngit commit --amend\n\n# 推送\n\ngit push origin\n```\n\n#### 4. log 相关\n\n```\n# 默认\ngit log\n\n# 查看所有分支的历史\ngit log --all\n\n# 查看图形化的版本演变历史\ngit log --all --graph\n\n# 查看当行的简洁历史\ngit log --oneline\n\n# 查看最近的四条简洁历史\ngit log --oneline -n4\n\n# 查看所有分支最近4条单行的图形演变历史\ngit log --oneline -n4 --graph\n\n# 跳转到gitlog的帮助文档网页\ngit help --web log\n\n```\n\n#### 5. pull request 工作流合并\n\n```\n# 在 github 上 pull request 或者 gitlab 上 create merge request\n\n# Step 1. Fetch and check out the branch for this merge request\n\ngit fetch origin\ngit checkout -b dev origin/dev\n\nStep 2. Review the changes locally\n\nStep 3. Merge the branch and fix any conflicts that come up\n\ngit fetch origin\ngit checkout master\ngit merge --no-ff dev\n\nStep 4. Push the result of the merge to GitLab\n\ngit push origin master\n\n```\n\n#### 6. 仓库相关\n\n```\n# existing_folder\ngit init\ngit remote add origin <url>\n# 修改仓库地址\ngit remote set-url <new_url>\n```\n\n#### 其他命令\n\n```\n# 查看未暂存改动\ngit diff\n\n# 查看已暂存改动\ngit diff --cached\n\n# 检出新分支\ngit checkout -b\n\n# 删除本地分支\ngit branch -d branch_name\n\n# 删除远程分支\ngit push origin --delete btanch_name\n```","source":"_posts/git常用命令记录.md","raw":"---\ntitle: git 常用命令记录\ndescription: 大部分的开发人员都会使用 git，同时依赖依赖客户端管理工具的也很多(我就是一个). 但某些情况下仍然需要使用命令来协助开发, 在此记录一些 git 命令(主要是帮助自己记录 = =).\n---\n\n> 大部分的开发人员都会使用 git，同时依赖依赖客户端管理工具的也很多(我就是一个). 但某些情况下仍然需要使用命令来协助开发, 在此记录一些 git 命令(主要是帮助自己记录 = =).\n\n<!--more-->\n\n---\n\n#### 1. 拉取指定分支到本地\n\n```\ngit clone -b branch_name folder_name \n```\n\n#### 2. 同一分支开发提交 (无冲突)\n\n```\ngit fetch\ngit add\ngit commit -m \"message\"\ngit merge --ff\ngit push\n```\n\n#### 3. 同一分支开发提交 (有冲突)\n\n```\n# 提交代码\n\ngit add\ngit commit -m \"message\"\n\n# 更新远程代码到本地\n\ngit pull --rebase (此时产生冲突)\ngit add .\n\n# 解决冲突后切回原分支\n\ngit rebase --continue\n\n# 追加提交到刚刚没有 merge 的提交中\n\ngit commit --amend\n\n# 推送\n\ngit push origin\n```\n\n#### 4. log 相关\n\n```\n# 默认\ngit log\n\n# 查看所有分支的历史\ngit log --all\n\n# 查看图形化的版本演变历史\ngit log --all --graph\n\n# 查看当行的简洁历史\ngit log --oneline\n\n# 查看最近的四条简洁历史\ngit log --oneline -n4\n\n# 查看所有分支最近4条单行的图形演变历史\ngit log --oneline -n4 --graph\n\n# 跳转到gitlog的帮助文档网页\ngit help --web log\n\n```\n\n#### 5. pull request 工作流合并\n\n```\n# 在 github 上 pull request 或者 gitlab 上 create merge request\n\n# Step 1. Fetch and check out the branch for this merge request\n\ngit fetch origin\ngit checkout -b dev origin/dev\n\nStep 2. Review the changes locally\n\nStep 3. Merge the branch and fix any conflicts that come up\n\ngit fetch origin\ngit checkout master\ngit merge --no-ff dev\n\nStep 4. Push the result of the merge to GitLab\n\ngit push origin master\n\n```\n\n#### 6. 仓库相关\n\n```\n# existing_folder\ngit init\ngit remote add origin <url>\n# 修改仓库地址\ngit remote set-url <new_url>\n```\n\n#### 其他命令\n\n```\n# 查看未暂存改动\ngit diff\n\n# 查看已暂存改动\ngit diff --cached\n\n# 检出新分支\ngit checkout -b\n\n# 删除本地分支\ngit branch -d branch_name\n\n# 删除远程分支\ngit push origin --delete btanch_name\n```","slug":"git常用命令记录","published":1,"date":"2019-09-22T15:28:37.086Z","updated":"2020-04-17T03:59:15.030Z","comments":0,"layout":"post","photos":[],"link":"2019/09/22/git常用命令记录","_id":"ckc375agp00025f6msyss378u","content":"<blockquote>\n<p>大部分的开发人员都会使用 git，同时依赖依赖客户端管理工具的也很多(我就是一个). 但某些情况下仍然需要使用命令来协助开发, 在此记录一些 git 命令(主要是帮助自己记录 = =).</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<hr>\n<h4 id=\"1-拉取指定分支到本地\">1. 拉取指定分支到本地<a href=\"2019/09/22/git常用命令记录#1-拉取指定分支到本地\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b branch_name folder_name</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"2-同一分支开发提交-无冲突\">2. 同一分支开发提交 (无冲突)<a href=\"2019/09/22/git常用命令记录#2-同一分支开发提交-无冲突\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch</span><br><span class=\"line\">git add</span><br><span class=\"line\">git commit -m &quot;message&quot;</span><br><span class=\"line\">git merge --ff</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"3-同一分支开发提交-有冲突\">3. 同一分支开发提交 (有冲突)<a href=\"2019/09/22/git常用命令记录#3-同一分支开发提交-有冲突\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 提交代码</span><br><span class=\"line\"></span><br><span class=\"line\">git add</span><br><span class=\"line\">git commit -m &quot;message&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新远程代码到本地</span><br><span class=\"line\"></span><br><span class=\"line\">git pull --rebase (此时产生冲突)</span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\"># 解决冲突后切回原分支</span><br><span class=\"line\"></span><br><span class=\"line\">git rebase --continue</span><br><span class=\"line\"></span><br><span class=\"line\"># 追加提交到刚刚没有 merge 的提交中</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"4-log-相关\">4. log 相关<a href=\"2019/09/22/git常用命令记录#4-log-相关\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认</span><br><span class=\"line\">git log</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看所有分支的历史</span><br><span class=\"line\">git log --all</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看图形化的版本演变历史</span><br><span class=\"line\">git log --all --graph</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当行的简洁历史</span><br><span class=\"line\">git log --oneline</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看最近的四条简洁历史</span><br><span class=\"line\">git log --oneline -n4</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看所有分支最近4条单行的图形演变历史</span><br><span class=\"line\">git log --oneline -n4 --graph</span><br><span class=\"line\"></span><br><span class=\"line\"># 跳转到gitlog的帮助文档网页</span><br><span class=\"line\">git help --web log</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"5-pull-request-工作流合并\">5. pull request 工作流合并<a href=\"2019/09/22/git常用命令记录#5-pull-request-工作流合并\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在 github 上 pull request 或者 gitlab 上 create merge request</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 1. Fetch and check out the branch for this merge request</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch origin</span><br><span class=\"line\">git checkout -b dev origin/dev</span><br><span class=\"line\"></span><br><span class=\"line\">Step 2. Review the changes locally</span><br><span class=\"line\"></span><br><span class=\"line\">Step 3. Merge the branch and fix any conflicts that come up</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch origin</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff dev</span><br><span class=\"line\"></span><br><span class=\"line\">Step 4. Push the result of the merge to GitLab</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"6-仓库相关\">6. 仓库相关<a href=\"2019/09/22/git常用命令记录#6-仓库相关\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># existing_folder</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin &lt;url&gt;</span><br><span class=\"line\"># 修改仓库地址</span><br><span class=\"line\">git remote set-url &lt;new_url&gt;</span><br></pre></td></tr></table></div></figure>\n\n<h4 id=\"其他命令\">其他命令<a href=\"2019/09/22/git常用命令记录#其他命令\"></a></h4><figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看未暂存改动</span><br><span class=\"line\">git diff</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看已暂存改动</span><br><span class=\"line\">git diff --cached</span><br><span class=\"line\"></span><br><span class=\"line\"># 检出新分支</span><br><span class=\"line\">git checkout -b</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除本地分支</span><br><span class=\"line\">git branch -d branch_name</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除远程分支</span><br><span class=\"line\">git push origin --delete btanch_name</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>大部分的开发人员都会使用 git，同时依赖依赖客户端管理工具的也很多(我就是一个). 但某些情况下仍然需要使用命令来协助开发, 在此记录一些 git 命令(主要是帮助自己记录 = =).</p>\n</blockquote>","more":"<hr>\n<h4 id=\"1-拉取指定分支到本地\"><a href=\"#1-拉取指定分支到本地\" class=\"headerlink\" title=\"1. 拉取指定分支到本地\"></a>1. 拉取指定分支到本地</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b branch_name folder_name</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-同一分支开发提交-无冲突\"><a href=\"#2-同一分支开发提交-无冲突\" class=\"headerlink\" title=\"2. 同一分支开发提交 (无冲突)\"></a>2. 同一分支开发提交 (无冲突)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch</span><br><span class=\"line\">git add</span><br><span class=\"line\">git commit -m &quot;message&quot;</span><br><span class=\"line\">git merge --ff</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-同一分支开发提交-有冲突\"><a href=\"#3-同一分支开发提交-有冲突\" class=\"headerlink\" title=\"3. 同一分支开发提交 (有冲突)\"></a>3. 同一分支开发提交 (有冲突)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 提交代码</span><br><span class=\"line\"></span><br><span class=\"line\">git add</span><br><span class=\"line\">git commit -m &quot;message&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新远程代码到本地</span><br><span class=\"line\"></span><br><span class=\"line\">git pull --rebase (此时产生冲突)</span><br><span class=\"line\">git add .</span><br><span class=\"line\"></span><br><span class=\"line\"># 解决冲突后切回原分支</span><br><span class=\"line\"></span><br><span class=\"line\">git rebase --continue</span><br><span class=\"line\"></span><br><span class=\"line\"># 追加提交到刚刚没有 merge 的提交中</span><br><span class=\"line\"></span><br><span class=\"line\">git commit --amend</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-log-相关\"><a href=\"#4-log-相关\" class=\"headerlink\" title=\"4. log 相关\"></a>4. log 相关</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认</span><br><span class=\"line\">git log</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看所有分支的历史</span><br><span class=\"line\">git log --all</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看图形化的版本演变历史</span><br><span class=\"line\">git log --all --graph</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当行的简洁历史</span><br><span class=\"line\">git log --oneline</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看最近的四条简洁历史</span><br><span class=\"line\">git log --oneline -n4</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看所有分支最近4条单行的图形演变历史</span><br><span class=\"line\">git log --oneline -n4 --graph</span><br><span class=\"line\"></span><br><span class=\"line\"># 跳转到gitlog的帮助文档网页</span><br><span class=\"line\">git help --web log</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-pull-request-工作流合并\"><a href=\"#5-pull-request-工作流合并\" class=\"headerlink\" title=\"5. pull request 工作流合并\"></a>5. pull request 工作流合并</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在 github 上 pull request 或者 gitlab 上 create merge request</span><br><span class=\"line\"></span><br><span class=\"line\"># Step 1. Fetch and check out the branch for this merge request</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch origin</span><br><span class=\"line\">git checkout -b dev origin/dev</span><br><span class=\"line\"></span><br><span class=\"line\">Step 2. Review the changes locally</span><br><span class=\"line\"></span><br><span class=\"line\">Step 3. Merge the branch and fix any conflicts that come up</span><br><span class=\"line\"></span><br><span class=\"line\">git fetch origin</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff dev</span><br><span class=\"line\"></span><br><span class=\"line\">Step 4. Push the result of the merge to GitLab</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-仓库相关\"><a href=\"#6-仓库相关\" class=\"headerlink\" title=\"6. 仓库相关\"></a>6. 仓库相关</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># existing_folder</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin &lt;url&gt;</span><br><span class=\"line\"># 修改仓库地址</span><br><span class=\"line\">git remote set-url &lt;new_url&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看未暂存改动</span><br><span class=\"line\">git diff</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看已暂存改动</span><br><span class=\"line\">git diff --cached</span><br><span class=\"line\"></span><br><span class=\"line\"># 检出新分支</span><br><span class=\"line\">git checkout -b</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除本地分支</span><br><span class=\"line\">git branch -d branch_name</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除远程分支</span><br><span class=\"line\">git push origin --delete btanch_name</span><br></pre></td></tr></table></figure>","plink":"http://xiaoYown.github.io/2019/09/22/git常用命令记录/","type":"post"},{"_content":"###  sdjfdlkfjklsdjfkl","source":"_posts/test.md","raw":"###  sdjfdlkfjklsdjfkl","slug":"test","published":1,"date":"2020-07-01T10:08:08.453Z","updated":"2020-07-01T10:08:12.884Z","title":"test","comments":0,"layout":"post","photos":[],"link":"2020/07/01/test","_id":"ckc37obaq0000rm6mhbobcmi7","content":"<h3 id=\"sdjfdlkfjklsdjfkl\">sdjfdlkfjklsdjfkl<a href=\"2020/07/01/test#sdjfdlkfjklsdjfkl\"></a></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"sdjfdlkfjklsdjfkl\"><a href=\"#sdjfdlkfjklsdjfkl\" class=\"headerlink\" title=\"sdjfdlkfjklsdjfkl\"></a>sdjfdlkfjklsdjfkl</h3>","plink":"http://xiaoYown.github.io/2020/07/01/test/","type":"post"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}